import telegram

from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from airflow.operators.python import get_current_context 
from airflow.decorators import dag, task

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import pandas as pd
import pandahouse as ph
from datetime import datetime,  timedelta

# —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
connection = {'host': 'https://clickhouse.lab.karpov.courses',
                      'database':'simulator_20220920',
                      'user':'student', 
                      'password':'**'
                }

# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è DAG'a
default_args = {
    'owner': 'v-volkova', # –í–ª–∞–¥–µ–ª–µ—Ü –æ–ø–µ—Ä–∞—Ü–∏–∏ 
    'depends_on_past': False, # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Ä–æ—à–ª—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
    'retries': 2, # –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å DAG
    'retry_delay': timedelta(minutes=5), # –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    'start_date': datetime(2022, 10, 16)
    }

# –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è DAG –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
schedule_interval = '0,15,30,45  * * * *' 

# —Ç–æ–∫–µ–Ω –º–æ–µ–≥–æ –±–æ—Ç–∞
my_token = '*85:AAH8LmgdaH6wz8EgZ61S2ZE2wAH27wzUSjg' 
# id —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ—Ç—á–µ—Ç 
chat_id = -644906564

@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False)
def aaa_volk_alert_Itog():

    @task()
    def check_anomaly_and_plot(df_cube, chat_id, x_i='views', n_seas=96,  ntimes=3,  a_razm=1.5, a_sig=2): 
        # –î–ª—è –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—É—é –∏ —Å–µ–∑–æ–Ω–Ω—É—é  —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é, –æ—Å—Ç–∞—Ç–∫–∏
        # –Ω–∞ –∏—Ö –±–∞–∑–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–æ—Å—É.
        # –ï—Å–ª–∏ –¥–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ chat_id alert-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ä–∏—Å—É–Ω–∫–∏ c –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏. 
        # df_cube - –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏, x_i - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –Ω–∞ –≤—ã–±—Ä–æ—Å—ã
        # n_seas - —á–∏—Å–ª–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (—Ä–∞–≤–Ω–æ 96 –¥–ª—è –æ–¥–Ω–∏—Ö —Å—É—Ç–æ–∫ –ø—Ä–∏ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö)
        # ntimes - —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç—Ä–∞–∂–∞—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
        # a_razm - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —à–∏—Ä–∏–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –±–∞–∑–µ –∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞
        # a_sig - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —à–∏—Ä–∏–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –±–∞–∑–µ std (–ø—Ä–∏ a_sig=2 —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –¥–≤—É—Ö —Å–∏–≥–º)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
        bot = telegram.Bot(token=my_token) 
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª—è–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏,—Å–æ–¥–µ—Ä–∂–∞—â–µ–π—Å—è –≤ —Å—Ç—Ä–æ–∫–µ x_i
        seas = "seas_"+ x_i
        series=df_cube[x_i]
        tre = "trend_"+x_i

        # –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å–∫–æ–ª—å–∑—è—â–∏–º –æ–∫–Ω–æ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É (—Ä–∞–∑–º–µ—Ä–æ–º n_seas=96 —Ç–æ—á–µ–∫)
        rolling_mean_week = df_cube[x_i].rolling(window=n_seas).mean() 
        df_cube[tre] = series-rolling_mean_week
        
        # –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –∫–∞–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º 
        seasons_0 = df_cube.groupby('hm')['hm'].max()
        seasons_0.reset_index(drop=True, inplace=True)
        seasons = pd.concat([seasons_0, pd.Series([0 for i in range(len(seasons_0))])], 
                            axis=1, keys= ['hm','avg'], ignore_index=True )
        seasons.columns=['hm','avg']

        df_cube[seas] = pd.Series([0 for i in range(len(df_cube[x_i]))])

        for i in range(n1):
            seasons['avg'][i] = (df_cube[tre][df_cube['hm'] ==seasons['hm'][i]]).mean()
            df_cube[seas][df_cube['hm'] ==seasons['hm'][i]] = seasons['avg'][i]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ä—è–¥–∞ (–ø–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π), 
        # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö  –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ 
        # –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞ –∏ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (std = sig)
        reset = series - rolling_mean_week - df_cube[seas]
        rolling_std = reset.std() 
        df_cube["q25_"+x_i] = reset.quantile(0.25) 
        df_cube["q75_"+x_i] = reset.quantile(0.75) 
        df_cube["iqr_"+x_i] = df_cube["q75_"+x_i] - df_cube["q25_"+x_i]  
        df_cube["up_iqr_"+x_i] =  df_cube["q75_"+x_i] + a_razm*df_cube["iqr_"+x_i]
        df_cube["low_iqr_"+x_i] = df_cube["q25_"+x_i] - a_razm*df_cube["iqr_"+x_i] 
        upper_bond_sig = rolling_mean_week + df_cube[seas] +a_sig*rolling_std 
        lower_bond_sig = rolling_mean_week + df_cube[seas] -a_sig*rolling_std 

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ - –∞–ª–µ—Ä—Ç –≤—ã–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω 
        # (–Ω–∞ —Å–∏–≥–º–∞—Ö –∏ –Ω–∞ –∫–≤–∞—Ä—Ç–∏–ª—å—å–Ω–æ–º —Ä–∞–∑–º–∞—Ö–µ) –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        
        is_alert = 0

        if df_cube[x_i].iloc[-1] < lower_bond_sig.iloc[-1] or df_cube[x_i].iloc[-1] > upper_bond_sig.iloc[-1]:
            is_alert += 1
        if reset.iloc[-1] < df_cube["low_iqr_"+x_i].iloc[-1] or reset.iloc[-1] > df_cube["up_iqr_"+x_i].iloc[-1]:
            is_alert += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (is_alert >0):
            if df_cube[x_i].iloc[-1] > df_cube[x_i].iloc[-2]:
                kod = 'üìà'
            else:
                kod = 'üìâ'
            msg = ('''!–ê–ù–û–ú–ê–õ–ò–Ø! ''' + kod
                   + ''' –ú–µ—Ç—Ä–∏–∫–∞ {x_i}: \n —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ  {current_val:.2f}\n 
                   –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è  
                   {last_val_diff:.2%}'''.format(x_i=x_i, current_val=df_cube[x_i].iloc[-1],                                                                                                              last_val_diff=-(1-(df_cube[x_i].iloc[-1]/df_cube[x_i].iloc[-2]))))

            # –°—Ç—Ä–æ–∏–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–∞–∑–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä—è–¥–∞
            plt.figure(figsize=(15,5)) 
            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Ä—è–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            ax =  plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):],
                           df_cube[x_i][(len(df_cube[x_i])-ntimes*n_seas):],  "r",    
                           label=" Actual values") 
            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Ä—è–¥–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥  
            ax =  plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):], 
                           rolling_mean_week[(len(df_cube[x_i])-ntimes*n_seas):], "y",  
                           label=" trend ") 
            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Ä—è–¥–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑ (–∫–∞–∫ —Å—É–º–º—É —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π) 
            ax =  plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):], 
                           (df_cube[seas]+rolling_mean_week)[(len(df_cube[x_i])-ntimes*n_seas):], "b",  
                           label="Predict for "+x_i) 
            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞  
            ax =  plt.plot( df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):],
                           upper_bond_sig[(len(df_cube[x_i])-ntimes*n_seas):],"g--",  
                           label="Upper Bond / Lower Bond by by {}sig".format(a_sig)) 
            ax =  plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):], 
                           lower_bond_sig[(len(df_cube[x_i])-ntimes*n_seas):],"g--") 

            plt.legend(loc="upper left") 
            plt.grid(True)
            plt.title(x_i+" predict and boundary\n ") 
            plt.ylabel(x_i)
            plt.tight_layout()
            plot_object = io.BytesIO()
            plt.savefig(plot_object)
            plot_object.seek(0)
            plot_object.name = 'a_plot.png'
            plt.close()


            # –°—Ç—Ä–æ–∏–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–∞–∑–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ä—è–¥–∞
            plt.figure(figsize=(15,5)) 
            plt.title("Reset for "+x_i+" and boundary\n ") 
            plt.ylabel("Reset")
            plt.tight_layout()
            nul_vec = pd.Series([0 for i in range(len(reset))])

            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ä—è–¥–∞
            ax = plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):],
                          reset[(len(df_cube[x_i])-ntimes*n_seas):], "r",  
                          label="REset for actual values") 
            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ –±–∞–∑–µ std  
            ax = plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):], 
                          (nul_vec+a_sig*rolling_std)[(len(df_cube[x_i])-ntimes*n_seas):],"g--", 
                          label="Upper Bond / Lower Bond by {}sig".format(a_sig) ) 
            ax = plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):], 
                          (nul_vec-a_sig*rolling_std)[(len(df_cube[x_i])-ntimes*n_seas):],"g--") 

            # –≤–Ω–æ—Å–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ –±–∞–∑–µ –∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞  
            ax =  plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):],
                           df_cube["up_iqr_"+x_i][(len(df_cube[x_i])-ntimes*n_seas):],"b--", 
                           label="Upper Bond / Lower Bond by {}iqr".format(a_razm)) 
            ax = plt.plot(df_cube['ts'][(len(df_cube[x_i])-ntimes*n_seas):], 
                          df_cube["low_iqr_"+x_i][(len(df_cube[x_i])-ntimes*n_seas):],"b--") 

            plt.legend(loc="upper left") 
            plt.grid(True)
            plot_object1 = io.BytesIO()
            plt.savefig(plot_object1)
            plot_object1.seek(0)
            plot_object1.name = 'e_plot.png'
            plt.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —á–∞—Ç
            bot.sendMessage(chat_id=chat_id, text=msg)
            bot.sendPhoto(chat_id=chat_id, photo=plot_object)
            bot.sendPhoto(chat_id=chat_id, photo=plot_object1)

        return is_alert

    @task()
    def extract_data_act():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–µ–º—Å—è –∫ –ë–î –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —á–∏—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π) 
    # –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–≤ —Å—Ä–µ–∑–∞—Ö –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ç–∏–ø—É os) –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –ø–æ 15 –º–∏–Ω—É—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ–¥–µ–ª–∏ 
        q1 = """
                 SELECT
                      toStartOfFifteenMinutes(time) as ts
                    , toDate(ts) as date
                    , formatDateTime(ts, '%R') as hm
                    , uniqExact(user_id) as users_lenta
                    , countIf(user_id, (action='view')) as views
                    , countIf(user_id, action='like') as likes
                    , countIf(user_id, os='iOS') as actions_iOS
                    , countIf(user_id, os=='Android') as actions_Android
                    , round(likes/views,2) as CTR
                FROM {db}.feed_actions
                WHERE ts >=  today()-7*3 and ts < toStartOfFifteenMinutes(now())
                GROUP BY ts, date, hm
                ORDER BY ts 
             """
        df = ph.read_clickhouse(q1, connection=connection)
        return df

    @task()
    def extract_data_mess():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–µ–º—Å—è –∫ –ë–î –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —á–∏—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Å–µ—Ä–≤–∏—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π) 
    # –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–≤ —Å—Ä–µ–∑–µ –ø–æ —Ç–∏–ø—É os) –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –ø–æ 15 –º–∏–Ω—É—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ–¥–µ–ª–∏ 
        q2 = """
                     SELECT
                          toStartOfFifteenMinutes(time) as ts
                        , toDate(ts) as date
                        , formatDateTime(ts, '%R') as hm
                        , uniqExact(user_id) as users_mess
                        , countIf(user_id, os='iOS') as messages_iOS
                        , countIf(user_id, os=='Android') as messages_Android
                    FROM {db}.message_actions
                    WHERE ts >=  today()-7*2 and ts < toStartOfFifteenMinutes(now())
                    GROUP BY ts, date, hm
                    ORDER BY ts 
             """
        df = ph.read_clickhouse(q2, connection=connection)
        return df
    
    
    # –í—ã–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫ –ø–æ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    df_cube = extract_data_act()
    check_anomaly_and_plot(df_cube, chat_id,  x_i='users_lenta')
    check_anomaly_and_plot(df_cube, chat_id,  x_i='views')
    check_anomaly_and_plot(df_cube, chat_id,  x_i='likes')
    check_anomaly_and_plot(df_cube, chat_id,  x_i='CTR')
    check_anomaly_and_plot(df_cube, chat_id,  x_i='actions_iOS')
    check_anomaly_and_plot(df_cube, chat_id,  x_i='actions_Android')
    
    # –í—ã–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫ –ø–æ –ø–æ —Å–µ—Ä–≤–∏—Å—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    df_cube_mess = extract_data_mess()
    check_anomaly_and_plot(df_cube_mess, chat_id,  x_i='messages_iOS')
    check_anomaly_and_plot(df_cube_mess, chat_id,  x_i='messages_Android')
    check_anomaly_and_plot(df_cube_mess, chat_id,  x_i='users_mess')

aaa_volk_alert = aaa_volk_alert_Itog()


